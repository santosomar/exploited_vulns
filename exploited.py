#!/usr/bin/python3
# A script to pull and process CVE information and respective data from CISA's Known Exploited Vulnerabilities Catalog
# author: Omar Santos @santosomar
# This is a work in progress!!!

from ast import arg
import requests
import json
import argparse



# The url from CISA's Known Exploited Vulnerabilities Catalog in JSON format
url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"

# Response from the CISA website
response = requests.request("GET", url)

# loading the response to JSON
exploited_cve = json.loads(response.text)


def vendor_search(search):
    vendor = parse_args.vendor
    for cve in exploited_cve['vulnerabilities']:
      if vendor in cve['vendorProject']:
         print (cve['cveID'] + " : " +  cve['vendorProject'] +  " , " + cve['product'])

def eol_search(search):
    eol = parse_args.eol
    if eol == True:
      for cve in exploited_cve['vulnerabilities']:
         if "impacted product is end-of-life" in cve['requiredAction']:
            print (cve['cveID'] + " : " +  cve['vendorProject'] +  " , " + cve['product'])


if __name__ == "__main__":
   parser = argparse.ArgumentParser(
      description="Omar's Client for the CISA's Known Exploited Vulnerabilities Catalog."
      )
   parser.add_argument(
      "--cve", 
      type=str, 
      dest="searched_cve",
      help="Searches for a given CVE."
      )
   parser.add_argument(
      "-v", "--vendor", 
      type=str,
      dest="vendor",
      help="Searches for an affected vendor."
      )
   parser.add_argument(
      "-p", "--product",
      type=str, 
      dest="product",
      help="Searches for an affected product."
      )
   parser.add_argument(
      "-e", "--eol", 
      action="store_true",
      help="Displays the exploited CVEs for products that are end-of-life"
      )

   parse_args = parser.parse_args()
   print(parse_args)
   vendor_search(parse_args.vendor)
   eol_search(parse_args.eol)

