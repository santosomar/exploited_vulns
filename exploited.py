#!/usr/bin/python3
# A script to pull and process CVE information and respective data from CISA's Known Exploited Vulnerabilities Catalog
# author: Omar Santos @santosomar
# This is a work in progress!!!

from ast import arg
import requests
import json
import argparse

# The url from CISA's Known Exploited Vulnerabilities Catalog in JSON format
url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"

# Response from the CISA website
response = requests.request("GET", url)

# loading the response to JSON
exploited_cve = json.loads(response.text)


def cve_search(search):
   """Searches for a given vendor (keyword search)"""
   searched_cve = parse_args.searched_cve
   if searched_cve !=None:
      cve_count = 0
      for cve in exploited_cve['vulnerabilities']:
         if searched_cve in cve['cveID']:
            cve_count = cve_count + 1
            print (cve['cveID'] + " : " +  cve['vendorProject'] +  ", " + cve['product'])
      if cve_count == 0:
         print ("CVE: " + searched_cve + " not found.")


def vendor_search(search):
   """Searches for a given vendor (keyword search)"""
   vendor = parse_args.vendor
   if vendor !=None:
      vendor_count = 0
      for cve in exploited_cve['vulnerabilities']:
         if vendor in cve['vendorProject']:
            vendor_count = vendor_count + 1
            print (cve['cveID'] + " : " +  cve['vendorProject'] +  ", " + cve['product'])
      if vendor_count == 0:
         print ("Vendor: " + vendor + " not found.")


def product_search(search):
   """Searches for a given product (keyword search)"""
   product = parse_args.product
   if product !=None:
      product_count = 0
      for cve in exploited_cve['vulnerabilities']:
         if product in cve['product']:
            product_count = product_count + 1
            print (cve['cveID'] + " : " +  cve['vendorProject'] +  ", " + cve['product'])
      if product_count == 0:
         print ("Product: " + product + " not found.")


def eol_search(search):
   """Searches for CVEs where the affected product is end-of-life"""
   eol = parse_args.eol
   if eol == True:
      for cve in exploited_cve['vulnerabilities']:
         if "impacted product is end-of-life" in cve['requiredAction']:
            print (cve['cveID'] + " : " +  cve['vendorProject'] +  ", " + cve['product'])

if __name__ == "__main__":
   parser = argparse.ArgumentParser(
      description="Omar's Client for the CISA's Known Exploited Vulnerabilities Catalog."
      )
   parser.add_argument(
      "--cve", 
      type=str, 
      dest="searched_cve",
      help="Searches for a given CVE."
      )
   parser.add_argument(
      "-v", "--vendor", 
      type=str,
      dest="vendor",
      help="Searches for an affected vendor."
      )
   parser.add_argument(
      "-p", "--product",
      type=str, 
      dest="product",
      help="Searches for an affected product."
      )
   parser.add_argument(
      "-e", "--eol", 
      action="store_true",
      help="Displays the exploited CVEs for products that are end-of-life"
      )

   parse_args = parser.parse_args()
   cve_search(parse_args.searched_cve)
   vendor_search(parse_args.vendor)
   product_search(parse_args.product)
   eol_search(parse_args.eol)
